allprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	
	repositories {
		mavenCentral()
	}
	
	
	sourceCompatibility = 1.7
	targetCompatibility = 1.7
	
	configurations {
		provided
	}

	//Include provided for compilation
	//sourceSets.main.compileClasspath += [configurations.provided]
	
	eclipse.classpath {
		file {
			beforeMerged { classpath -> 
				def jreEntries = classpath.entries.findAll { entry ->
					//entry.kind.equals('con') &&
					entry.path.contains('org.eclipse.jdt.launching.JRE_CONTAINER')
				}
				classpath.entries.removeAll(jreEntries)
			}
		}
	}
	
	
	eclipseJdt {
		enabled = false
	}
}

project(':libGpx4J') {
	compileJava.doFirst {
		ant.patch(patchfile: "${project.rootProject.rootDir}/src/main/patch/make-Link-accept-string.patch",
			dir: "${project.projectDir}/..", strip: 1)
	}
}

task downloadAndExtractExiftool(type: Copy) {
	def f = file('lib/exiftool.exe')
	
	def zipFile = file('lib/exiftool.zip')
	def outputDir = file('lib')
	if (!f.exists()) {
		new URL('https://netcologne.dl.sourceforge.net/project/exiftool/exiftool-11.26.zip')
			.withInputStream{ i -> zipFile.withOutputStream{ it << i }}
		
		from zipTree(zipFile)
		into outputDir
		rename '.*', 'exiftool.exe'
		
	}
	doLast {
		zipFile.delete()
	}
}

assemble.dependsOn downloadAndExtractExiftool

jar {
	manifest {
		attributes	'Implementation-Title': name,
				 	'Implementation-Version': version
	}
}

dependencies {
	compile project(':libGpx4J')
	compile 'com.sun.xml.bind:jaxb-impl:2.2.3-2'
	compile 'org.apache.commons:commons-csv:1.1'
}

cleanEclipse {
	delete "${project.rootDir}/bin"
}